var documenterSearchIndex = {"docs":
[{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"EditURL = \"https://github.com/hexaeder/IOSystems_prototype/blob/master/examples/spacecraft.jl\"","category":"page"},{"location":"generated/spacecraft/#Controlsystem:-Spaceship","page":"Example","title":"Controlsystem: Spaceship","text":"","category":"section"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"As an example we want to build an IOSystem controlling the altitude of a small spaccraft. The spacecraft has mass m and can be controlled with thrusters wich applay the force F(t) to the spacecraft. The altitutude x(t)","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"dot v(t) = frac F(t) m\ndot x(t) =  v(t)","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"in our model this system has the input F(t), the internal state v(t) and the output x(t).","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"using IOSystems\nusing ModelingToolkit\n@parameters t, m\n@variables x(t) F(t) v(t)\n@derivatives D'~t\n\nspacecraft = IOBlock([D(v) ~ F/m, D(x) ~ v], # define the equation\n                     [F], # inputs of the system\n                     [x], # outputs of the system\n                     name = :spacecraft)\n@show spacecraft.inputs\n@show spacecraft.outputs\n@show spacecraft.istates\nnothing # hide","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"We want to model a controler which takes a desired altituted as an input parameter and outputs the force for thrusters.","category":"page"},{"location":"generated/spacecraft/#Simple-proportional-controller","page":"Example","title":"Simple proportional controller","text":"","category":"section"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"A proportional controller takes an input i and calculates the output proportional to the input.","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":" o(t) = Kcdot i(t)","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"@parameters K\n@variables o(t) i(t)\n\nprop = IOBlock([o ~ K*i], [i], [o], name = :prop)","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"In order to make this usefull as an controller the input has to be the difference between the reference and the system variable (negativ feedback). We can model this as an IOSystem where","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"Δ = p - m","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"@variables Δ(t) p(t) m(t)\ndiff = IOBlock([Δ ~ p - m], [p, m], [Δ], name=:diff)","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"now we can connect both of the defined models to create an proportional controller","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"propc = IOSystem([prop.i => diff.Δ], # conncect inptup of prop to output of diff\n                 [diff, prop], # define subsystems\n                 name=:propc)\npropc.inputs_map\npropc.istates_map\npropc.outputs_map\n\na=[x,i,o]\nModelingToolkit.renamespace(:blubb,a[1])","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"","category":"page"},{"location":"generated/spacecraft/","page":"Example","title":"Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = IOSystems","category":"page"},{"location":"#IOSystems","page":"Home","title":"IOSystems","text":"","category":"section"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The base type for the IOSystems is AbstractIOSystem","category":"page"},{"location":"","page":"Home","title":"Home","text":"AbstractIOSystem","category":"page"},{"location":"#IOSystems.AbstractIOSystem","page":"Home","title":"IOSystems.AbstractIOSystem","text":"AbstractIOSystem\n\nBasic type for IOSystems. Such systems contains a ODEProblem of the form\n\nbeginaligned\ndot mathbf x(t) = f( mathbf i(t) )\nmathbf o(t) = g(mathbf x(t) mathbf i(t))\nendaligned\n\nwhere the states can be separated into states = inputs ∪ istates ∪ outputs (istates is short for internalstates).\n\nEach AIOS has a name field generating a namespace. The symbols of the\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"whith the possible concrete implementations","category":"page"},{"location":"","page":"Home","title":"Home","text":"IOBlock\nIOSystem","category":"page"},{"location":"#IOSystems.IOBlock","page":"Home","title":"IOSystems.IOBlock","text":"struct IOBlock <: AbstractIOSystem\n\nA basic IOSystem which consists of a single ODESystems.\n\nname::Symbol\ninputs::Array{SymbolicUtils.Term,1}\nistates::Array{SymbolicUtils.Term,1}\noutputs::Array{SymbolicUtils.Term,1}\nsystem::ModelingToolkit.ODESystem\n\n\n\n\n\n","category":"type"},{"location":"#IOSystems.IOSystem","page":"Home","title":"IOSystems.IOSystem","text":"struct IOSystem <: AbstractIOSystem\n\nA composit IOSystem which consists of multipe AbstractIOSystem(@ref) wich are connected via a vector of namespaced pairs (subsys1.out1 => subsys2.in1). The inputs and outputs of the composit system are declared in the namespace of the new composit system but point to namespaced variables of the subsystems.\n\nname::Symbol\ninputs::Array{SymbolicUtils.Term,1}\nistates::Array{SymbolicUtils.Term,1}\noutputs::Array{SymbolicUtils.Term,1}\nconnections::Dict{SymbolicUtils.Term,SymbolicUtils.Term}\ninputs_map::Dict{SymbolicUtils.Term,SymbolicUtils.Term}\nistates_map::Dict{SymbolicUtils.Term,SymbolicUtils.Term}\noutputs_map::Dict{SymbolicUtils.Term,SymbolicUtils.Term}\nsystems::Array{AbstractIOSystem,1}\n\n\n\n\n\n","category":"type"}]
}
